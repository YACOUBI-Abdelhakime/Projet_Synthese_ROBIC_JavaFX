package application;

import javafx.fxml.FXML;

import javafx.scene.control.Button;

import javafx.scene.control.TextField;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.Socket;

import javafx.event.ActionEvent;

import javafx.scene.control.TextArea;

import javafx.scene.layout.GridPane;
import javafx.stage.FileChooser;

public class Control {
	@FXML
	private TextField hostnameV;
	@FXML
	private TextField portV;
	@FXML
	private Button btnConnextion;
	@FXML
	private Button btnDeconnecter;
	@FXML
	private GridPane body;
	@FXML
	private TextArea textArea1;
	@FXML
	private TextArea textArea2;
	@FXML
	private Button b1;
	@FXML
	private Button btnArreter;


	Socket socket;
    private static BufferedReader br;
    private static PrintStream ps;
    String textTrace="";
    boolean envoyerAutre ;
    
	
	// Event Listener on Button[#btnDeconnecter].onAction
	@FXML
	public void deconnecter(ActionEvent event) {
		try {
			ps.println(JSON.Java2Json(new Message("cmd","bye")));
			socket.close();
			ps.close();
	    	br.close();
	    	body.setDisable(true);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	// Event Listener on Button[#btnArreter].onAction
	@FXML
	public void arreterExec(ActionEvent event) {
		envoyerAutre = false;
	}

	// Event Listener on MenuItem.onAction
	@FXML
	public void openFile(ActionEvent event) {
		FileChooser fileChooser = new FileChooser();
		FileInputStream fis;

        //only allow text files to be selected using chooser
        fileChooser.getExtensionFilters().add(
                new FileChooser.ExtensionFilter("Text files (*.txt)", "*.txt")
        );

        //set initial directory somewhere user will recognise
        fileChooser.setInitialDirectory(new File(System.getProperty("user.home")));

        //let user select file
        File fileToLoad = fileChooser.showOpenDialog(null);
        
        
        if (fileToLoad != null) {
        	System.out.println("file = "+fileToLoad.getPath());
        }else {
        	System.out.println("file = null");
        	return;
        }
        try {
			fis = new FileInputStream(fileToLoad);
			int n;
			String text = "";
			//byte buf[] = new byte[512];
			while((n = fis.read()) > 0) {
				text += (char) n;
			}
			textArea1.setText(text);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
        
        
        
	}
	// Event Listener on MenuItem.onAction
	@FXML
	public void saveFile(ActionEvent event) {
		// TODO Autogenerated 
	}
	// Event Listener on Button[#btnConnextion].onAction
	@FXML
	public void connexion(ActionEvent event) {
		int port = Integer.parseInt(portV.getText().toString());
    	String host = hostnameV.getText();
    	
    	try {
			socket = new Socket(host, port);
	    	ps = new PrintStream(socket.getOutputStream());
	    	br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
	    	
	    	body.setDisable(false);
	    	
    	}  catch (Exception e) {
			e.printStackTrace();
		}
	}
	// Event Listener on Button[#b1].onAction
	@FXML
	public void b1_exec(ActionEvent event) {
		String cmd = textArea1.getText().trim();
    	textTrace="";
		
		Message msg = new Message("script",cmd);
    	
    	String json = JSON.Java2Json(msg); 
    	
    	ps.println(json);
    	
    	readFromServer();
	    
		
		/*
		
		 String commande = textArea1.getText().trim();
		String scripts[] = commande.split("\n");
    	textTrace="";
    	b1.setDisable(true);
    	envoyerAutre = true;
		
		for(int i=0; i<scripts.length && envoyerAutre ;i++) {
			String cmd = scripts[i];
			Message msg = new Message("script",cmd);
	    	System.out.println("Message = "+msg);
	    	
	    	String json = "";
	
	    	json = JSON.Java2Json(msg); 
	    	
	    	ps.println(json);
	    	
	    	readFromServer();
	    	
		}
		ps.println(JSON.Java2Json(new Message("cmd","fin")));
		b1.setDisable(false);
		
		 */
	}
	
	public void readFromServer() {
		int state;
		String tmpRes,tmpAllRes="";
		try {
			do{
				tmpRes = br.readLine();//System.out.println("+>> "+tmpRes);
		        state = Integer.valueOf(tmpRes.substring(0, tmpRes.indexOf(" ")));
		        tmpRes = ">> "+tmpRes.substring(2).trim()+"\n";
		        tmpAllRes += tmpRes.equals(">> \n") ? "" : tmpRes;
		        
			}while (state == 1); 

			textTrace += tmpAllRes;
			textArea2.setText(textTrace);
			
		} catch (IOException e) {
			//server error
			textTrace += ">> Serveur est deconncté !!";
			textArea2.setText(textTrace);
		}
	}
	
}
